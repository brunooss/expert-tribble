{"version":3,"sources":["App.tsx","registerServiceWorker.ts","index.tsx"],"names":["App","state","authState","formEmail","formPassword","messages","signIn","event","preventDefault","_this","firebase","signInWithEmailAndPassword","signOut","onSignInFormFieldChange","console","log","target","setState","Object","defineProperty","name","value","generateMessage","ref","push","text","random","Math","receiveMessage","on","messageSnapshot","ReactDOM","react","document","getElementById","_this2","this","onAuthStateChanged","user","_this3","val","map","message","key","className","onClick","id","onSubmit","onChange","type","React","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","src_App_0","URL","process","toString","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.12751931.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport \"./App.css\";\r\nimport \"./style.css\";\r\nimport * as firebase from \"firebase/app\";\r\n\r\nimport \"./style.css\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\ninterface IState {\r\n  authState: \"loading\" | \"autenticado\" | \"naoautenticado\";\r\n\r\n  formEmail: string;\r\n  formPassword: string;\r\n\r\n  messages: any;\r\n}\r\n\r\nclass App extends React.Component {\r\n  state: IState = {\r\n    authState: \"loading\",\r\n    formEmail: \"\",\r\n    formPassword: \"\",\r\n    messages: []\r\n  };\r\n\r\n  componentDidMount() {\r\n    // observa autenticacao\r\n    firebase.auth().onAuthStateChanged(user => {\r\n      if (!user) {\r\n        this.setState({ authState: \"naoautenticado\" });\r\n        console.log(\"NAOAUTENTICADO\");\r\n      } else {\r\n        this.setState({ authState: \"autenticado\" });\r\n        console.log(\"AUTENTICADO\");\r\n      }\r\n    });\r\n  }\r\n\r\n  signIn = (event: any) => {\r\n    event.preventDefault();\r\n\r\n    if (!this.state.formEmail) {\r\n      return;\r\n    }\r\n    if (!this.state.formPassword) {\r\n      return;\r\n    }\r\n\r\n    firebase\r\n      .auth()\r\n      .signInWithEmailAndPassword(\r\n        this.state.formEmail,\r\n        this.state.formPassword\r\n      );\r\n  };\r\n\r\n  signOut = () => {\r\n    firebase.auth().signOut();\r\n  };\r\n\r\n  onSignInFormFieldChange = (event: any) => {\r\n    console.log(event.target);\r\n    this.setState({ [event.target.name]: event.target.value });\r\n  };\r\n\r\n  generateMessage = () => {\r\n    firebase\r\n      .database()\r\n      .ref(\"messages\")\r\n      .push({\r\n        text: \"Mensagem gerada automaticamente!\",\r\n        random: Math.random() * 9999\r\n      });\r\n  };\r\n\r\n  receiveMessage = () => {\r\n    firebase\r\n      .database()\r\n      .ref(\"messages\")\r\n      .on(\"value\", (messageSnapshot: any) => {\r\n        ReactDOM.render(<h1>New Message!</h1>, document.getElementById(\"msg\"));\r\n      });\r\n  };\r\n\r\n  public render() {\r\n    // observa lista de mensagens\r\n    firebase\r\n      .database()\r\n      .ref(\"messages\")\r\n      .on(\"value\", (messageSnapshot: any) => {\r\n        this.setState({ messages: this.state.messages + messageSnapshot });\r\n        console.log(\"Nova mensagem: \" + messageSnapshot.val());\r\n        this.state.messages.map((message: any) => (\r\n          <h1 key=\"KEY\">New message</h1>\r\n        ));\r\n      });\r\n    switch (this.state.authState) {\r\n      case \"loading\":\r\n        return <h1>Loading...</h1>;\r\n      case \"autenticado\":\r\n        return (\r\n          <div className=\"App\">\r\n            <header className=\"Header\">\r\n              <h1 className=\"Title\">Expert test tribble</h1>\r\n              <div>\r\n                <i className=\"material-icons Icon\">email</i>\r\n                <i className=\"material-icons Icon\">stay_current_portrait</i>\r\n                <i className=\"material-icons Icon\">chat</i>\r\n              </div>\r\n            </header>\r\n            <h1>Chat vai ser aqui ...</h1>\r\n            <button onClick={this.generateMessage}>Generate the message</button>\r\n            <button onClick={this.signOut}>Sign out</button>\r\n            <div id=\"msg\">\r\n              <h1>Messages here:</h1>\r\n            </div>\r\n          </div>\r\n        );\r\n      default:\r\n        return (\r\n          <div className=\"App\">\r\n            <header className=\"Header\">\r\n              <h1 className=\"Title\">Expert test Tribble</h1>\r\n            </header>\r\n            <form className=\"Login\" onSubmit={this.signIn}>\r\n              <h1>Log in</h1>\r\n              <input\r\n                className=\"LoginInput\"\r\n                name=\"formEmail\"\r\n                value={this.state.formEmail}\r\n                onChange={this.onSignInFormFieldChange}\r\n              />\r\n              <br />\r\n              <input\r\n                className=\"LoginInput\"\r\n                name=\"formPassword\"\r\n                type=\"password\"\r\n                value={this.state.formPassword}\r\n                onChange={this.onSignInFormFieldChange}\r\n              />\r\n              <br />\r\n              <button type=\"submit\">Sign In</button>\r\n            </form>\r\n          </div>\r\n        );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\n/*\r\n\r\ncd .\\react-project\\\r\nnpm run build\r\ncd ..\r\nfirebase deploy --only hosting\r\n\r\n*/\r\n","// tslint:disable:no-console\r\n\r\n// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n\r\n// it offline capabilities. However, it also means that developers (and users)\r\n\r\n// will only see deployed updates on the 'N+1' visit to a page, since previously\r\n\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL!,\r\n\r\n      window.location.toString()\r\n    );\r\n\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n\r\n        // service worker/PWA documentation.\r\n\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string) {\r\n  navigator.serviceWorker\r\n\r\n    .register(swUrl)\r\n\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n\r\n        if (installingWorker) {\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === \"installed\") {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the old content will have been purged and\r\n\r\n                // the fresh content will have been added to the cache.\r\n\r\n                // It's the perfect time to display a 'New content is\r\n\r\n                // available; please refresh.' message in your web app.\r\n\r\n                console.log(\"New content is available; please refresh.\");\r\n              } else {\r\n                // At this point, everything has been precached.\r\n\r\n                // It's the perfect time to display a\r\n\r\n                // 'Content is cached for offline use.' message.\r\n\r\n                console.log(\"Content is cached for offline use.\");\r\n              }\r\n            }\r\n          };\r\n        }\r\n      };\r\n    })\r\n\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\")!.indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport * as firebase from \"firebase\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyCNkb1WAn6iPHQpXhFhs6-wr0RzToyDOSk\",\r\n  authDomain: \"expert-tribble.firebaseapp.com\",\r\n  databaseURL: \"https://expert-tribble.firebaseio.com\",\r\n  projectId: \"expert-tribble\",\r\n  storageBucket: \"expert-tribble.appspot.com\",\r\n  messagingSenderId: \"830210970310\"\r\n};\r\nfirebase.initializeApp(config);\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\") as HTMLElement);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}